{"version":3,"sources":["utils/dateDecriptions.js","components/Day.jsx","components/CalendarMonthView.jsx","utils/calculateMonthDays.js","components/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["weekDays","monthText","Day","_ref","day","onDateChange","color","selectedDay","react_default","a","createElement","className","concat","undefined","key","style","onClick","CalendarMonthView","month","year","handleSetMonth","handleSetYear","date","_useState","useState","_useState2","Object","slicedToArray","monthViewDays","setMonthViewDays","useEffect","monthDays","lastMonthDays","oddMonths","Math","ceil","daysBefore","daysAfter","currentMonthDays","i","push","calculateMonthDays","Fragment","index_es","icon","faCaretLeft","faCaretRight","map","weekDay","monthDay","calDay","components_Day","Calendar","setDate","_useState3","_useState4","setMonth","_useState5","_useState6","monthView","setMonthView","_useState7","_useState8","setDay","_useState9","_useState10","setYear","_useState11","_useState12","validMessage","setValidMessage","dateValues","split","newYear","Number","value","type","pattern","onChange","target","validationMessage","faCalendarAlt","components_CalendarMonthView","currentDay","App","components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd7dbb4d.chunk.js","sourcesContent":["export const weekDays = ['Zo', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za']\r\n\r\nexport const monthText = [\r\n  'Januari',\r\n  'Februari',\r\n  'Maart',\r\n  'April',\r\n  'Mei',\r\n  'Juni',\r\n  'Juli',\r\n  'Augustus',\r\n  'September',\r\n  'Oktober',\r\n  'November'\r\n]\r\n","import React from 'react'\r\n\r\nconst Day = ({ day, onDateChange, color, selectedDay }) => (\r\n  <button\r\n    className={`day ${selectedDay ? 'selected-day' : undefined}`}\r\n    key={`prevMonth-${day}`}\r\n    style={{ color }}\r\n    onClick={onDateChange}>\r\n    {day}\r\n  </button>\r\n)\r\n\r\nexport default Day\r\n","import React, { useEffect, useState } from 'react'\r\nimport { calculateMonthDays } from '../utils/calculateMonthDays'\r\nimport { monthText, weekDays } from '../utils/dateDecriptions'\r\nimport Day from '../components/Day'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretLeft, faCaretRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst CalendarMonthView = ({\r\n  month,\r\n  year,\r\n  onDateChange,\r\n  handleSetMonth,\r\n  handleSetYear,\r\n  date\r\n}) => {\r\n  const [monthViewDays, setMonthViewDays] = useState([])\r\n\r\n  useEffect(() => {\r\n    setMonthViewDays(calculateMonthDays(month, year))\r\n  }, [month, year])\r\n\r\n  return (\r\n    <>\r\n      {month && month !== 0 && monthViewDays && (\r\n        <div className='days-container'>\r\n          <label className='startdate'>Ingangsdatum</label>\r\n          <div className='startdate-monthcontainer'>\r\n            <div className='flex-row'>\r\n              <FontAwesomeIcon\r\n                onClick={() => handleSetMonth(month === 1 ? 11 : month - 1)}\r\n                className='caret'\r\n                icon={faCaretLeft}\r\n              />\r\n              <p className='output-text'>{monthText[month - 1]}</p>\r\n              <FontAwesomeIcon\r\n                onClick={() => handleSetMonth(month === 11 ? 1 : month + 1)}\r\n                className='caret'\r\n                icon={faCaretRight}\r\n              />\r\n            </div>\r\n            <div className='flex-row'>\r\n              <FontAwesomeIcon\r\n                onClick={() => handleSetYear(year - 1)}\r\n                className='caret'\r\n                icon={faCaretLeft}\r\n              />\r\n              <p className='output-text'>{year}</p>\r\n              <FontAwesomeIcon\r\n                onClick={() => handleSetYear(year + 1)}\r\n                className='caret'\r\n                icon={faCaretRight}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {weekDays.map(weekDay => (\r\n            <p className='weekday' key={weekDay}>\r\n              {weekDay}\r\n            </p>\r\n          ))}\r\n\r\n          {monthViewDays &&\r\n            monthViewDays.map((day, i) => {\r\n              const monthDay =\r\n                i < day - 14 ? month - 1 : i > day + 14 ? month + 1 : month\r\n              const calDay = `${day < 10 ? '0' + day : day}-${\r\n                monthDay < 10 ? '0' + monthDay : monthDay\r\n              }-${year}`\r\n              const selectedDay = date === calDay\r\n\r\n              return (\r\n                <Day\r\n                  key={`currentMonth-${day}-${i}`}\r\n                  day={day}\r\n                  month={monthDay}\r\n                  color={\r\n                    !selectedDay &&\r\n                    (month === monthDay ? '#000066' : 'lightgrey')\r\n                  }\r\n                  selectedDay={selectedDay}\r\n                  year={year}\r\n                  onDateChange={() => onDateChange(calDay)}\r\n                />\r\n              )\r\n            })}\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalendarMonthView\r\n","export const calculateMonthDays = (month, year) => {\r\n  // decide days for the even and off months\r\n\r\n  let monthDays = 0\r\n  let lastMonthDays = 0\r\n\r\n  if (month > 0 && month < 12) {\r\n    monthDays = month % 2 === 0 ? 32 : 33\r\n    lastMonthDays = monthDays === 32 ? 33 : 32\r\n  }\r\n\r\n  const oddMonths = Math.ceil(month / 2)\r\n  const evenMonths = month - oddMonths\r\n\r\n  // Total days that have passed in the year\r\n  const totalYearsDays = year * 358\r\n  const daysSelectedYear = oddMonths * 33 + evenMonths * 32\r\n\r\n  // The remainder of 7 to check days before this month\r\n  const daysBefore = (daysSelectedYear + totalYearsDays) % 7\r\n\r\n  // Check days after\r\n  const daysAfter = 7 - ((daysBefore + monthDays) % 7)\r\n\r\n  // So lastmonthDays minus daysbefore should be when the new row starts, then the monthdays, and then what is left with remainder of 7\r\n  let startDay = lastMonthDays - daysBefore + 1\r\n\r\n  const currentMonthDays = []\r\n\r\n  // Add weekdays from previousmonth\r\n  for (let i = startDay; i <= lastMonthDays; i++) {\r\n    currentMonthDays.push(i)\r\n  }\r\n\r\n  // Add weekdays from current month\r\n  for (let i = 1; i <= monthDays; i++) {\r\n    currentMonthDays.push(i)\r\n  }\r\n\r\n  // Add weekdays from next month\r\n  if (daysAfter !== 7) {\r\n    for (let i = 1; i <= daysAfter; i++) {\r\n      currentMonthDays.push(i)\r\n    }\r\n  }\r\n\r\n  return [...currentMonthDays]\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport CalendarMonthView from './CalendarMonthView'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Calendar = () => {\r\n  const [date, setDate] = useState('11-03-2018')\r\n  const [month, setMonth] = useState(null)\r\n  const [monthView, setMonthView] = useState(false)\r\n  const [day, setDay] = useState(11)\r\n  const [year, setYear] = useState('2018')\r\n  const [validMessage, setValidMessage] = useState('')\r\n\r\n  // When the date changes, extract the day, year and month from the string,\r\n  // and set them to the state\r\n  useEffect(() => {\r\n    const dateValues = date.split('-')\r\n    const newYear = dateValues[2]\r\n    setMonth(Number(dateValues[1]))\r\n    setDay(Number(dateValues[0]))\r\n    setYear(Number(newYear))\r\n  }, [date])\r\n\r\n  // When the date in the input field change\r\n  // set the date and validation message to the state\r\n  const handleDateChange = ({ target }) => {\r\n    setValidMessage(target.validationMessage)\r\n    setDate(target.value)\r\n  }\r\n\r\n  return (\r\n    <div className='calendar-container'>\r\n      <div className='input-container'>\r\n        <div className='inputfield-container'>\r\n          <label className='startdate'>Ingangsdatum</label>\r\n          <input\r\n            value={date}\r\n            type='text'\r\n            pattern='^((?!00)[0-2][0-9]|(3)[0-3])-((?!00)((0)[0-9])|((1)[0-2]))-\\d{4}$'\r\n            onChange={handleDateChange}\r\n          />\r\n        </div>\r\n        <div\r\n          className='inputicon-container'\r\n          onClick={() => date && setMonthView(!monthView)}>\r\n          <FontAwesomeIcon className='calendar' icon={faCalendarAlt} />\r\n        </div>\r\n      </div>\r\n\r\n      {!validMessage && date\r\n        ? monthView && (\r\n            <CalendarMonthView\r\n              date={date}\r\n              month={month}\r\n              handleSetMonth={setMonth}\r\n              handleSetYear={setYear}\r\n              currentDay={day}\r\n              year={year}\r\n              onDateChange={setDate}\r\n            />\r\n          )\r\n        : validMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calendar\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Calendar from './components/Calendar'\r\n\r\nfunction App() {\r\n  return (\r\n    <div >\r\n      <Calendar date={'09 - 08 - 2019'} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}